import json
from models.TaskGraph import TaskGraph
from converters.json_converters.JSONNestedClassVisitor import JSONNestedClassVisitor
from converters.json_converters.json_util import extract_or_default


def save_task_graph_as_json(tg: TaskGraph, abs_path):
    """
    Dump task graph into json format
    :param tg: task graph
    :param abs_path abs path to output file
    :return: task graph in .json format
    """
    visitor = JSONNestedClassVisitor(tg, abs_path)
    visitor.run()


def parse_app_graph_json(path):
    """
    Parse application graph from JSON file
    :param path path to json_converters file
    """
    with open(path, 'r') as file:
        if file is None:
            raise FileNotFoundError
        else:
            topology = json.load(file)
            tasks = topology["tasks"]
            tasks_adjacent_list = topology["tasks_adjacent_list"]
            tasks_reverse_adjacent_list = topology["tasks_reverse_adjacent_list"]
            tasks_out_comm_cost = topology["tasks_out_comm_cost"]
            name = extract_or_default(topology, "name", "topologyGraph")
            jobs_per_task = extract_or_default(topology, "jobs_per_task", [])

            app_graph = TaskGraph(tasks, tasks_adjacent_list, tasks_reverse_adjacent_list, tasks_out_comm_cost)
            app_graph.name = name
            app_graph.jobs_per_task = jobs_per_task
            return app_graph


def parse_app_graph_json_old(path):
    """
    Parse application graph from JSON file (for OLD SPECIFICATION, generated by ESPAM)
    :param path path to json_converters file
    """
    with open(path, 'r') as file:
        if file is None:
            raise FileNotFoundError
        else:
            topology = json.load(file)
            tasks = extract_or_default(topology, "task_names", [])
            tasks_adjacent_list = topology["adjacency_lists"]
            tasks_reverse_adjacent_list = topology["adjacency_lists_reverse"]
            tasks_out_comm_cost = topology["output_connection_weighs"]
            name = extract_or_default(topology, "name", "topologyGraph")

            app_graph = TaskGraph(tasks, tasks_adjacent_list, tasks_reverse_adjacent_list, tasks_out_comm_cost)
            app_graph.name = name
            app_graph.jobs_per_task = [[task] for task in tasks]
            return app_graph


