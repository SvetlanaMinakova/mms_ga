import argparse
import os.path
from os.path import dirname
import sys
import traceback

"""
Console-interface script for the best chromosome selection performed after the GA-based search
"""


def main():
    parser = argparse.ArgumentParser(description='Train an onnx model with iterations')
    # required arguments
    parser.add_argument('-c', '--chromosomes', type=str, action='store',
                        help='path to .json file with chromosomes, '
                             'generated by the MMS GA (see run_mms_ga.py)', required=True)

    parser.add_argument('-m', metavar='--memory-constraint', type=float, action='store', default=-1,
                        help='maximum amount of memory (in megaBytes) occupied by the buffers of DNNs '
                             'used by the application. If = -1, an application does not have a memory constraint')

    parser.add_argument('-tl', metavar='--time-loss', type=float, action='store', default=-1,
                        help='maximum amount of execution delay (time loss) introduced into '
                             'application by the DNN-based application memory reduction. '
                             'If -1, the application does not have the time loss constraint')

    parser.add_argument('-pct', metavar='--print-top-chromosomes', type=int, action='store', default=1,
                        help='Number of top (lowest memory cost) chromosomes to print')

    parser.add_argument('-pcb', metavar='--print-bottom-chromosomes', type=int, action='store', default=1,
                        help='Number of bottom (highest memory cost) chromosomes to print')

    parser.add_argument('-o', metavar='--output', type=str, action='store',
                        default="./output/best_chromosome/best_chromosome.json",
                        help='Path to the output .json file to save the best chromosome in.')

    # general flags
    parser.add_argument("--silent", help="do not provide print-out for the script steps",
                        action="store_true", default=False)

    # parse arguments
    args = parser.parse_args()

    # Determine current directory and add path to this
    # directory to syspath to use other .python modules
    this_dir = get_cur_directory()
    sys.path.append(this_dir)

    # import sub-modules
    from util import print_stage
    from fileworkers.json_fw import read_json
    from fileworkers.json_fw import save_as_json
    from mms_selection import filter_chromosomes, select_chromosome_with_min_time_loss, \
        select_chromosome_with_min_buf_size

    try:
        # parse config
        chromosomes_file = args.chromosomes
        memory_constraint = args.m
        time_loss = args.tl
        print_top_chromosomes = args.pct
        print_bottom_chromosomes = args.pcb
        output_file_path = args.o
        silent = args.silent
        verbose = not silent

        stage = "Parse file with chromosomes"
        print_stage(stage, verbose)
        json_file_content = read_json(chromosomes_file)
        json_chromosomes = json_file_content["chromosomes"]
        if verbose:
            print("   ", len(json_chromosomes), "chromosomes found: ")
            print_chromosomes(json_chromosomes, print_top_chromosomes, print_bottom_chromosomes)

        # script finishes if no chromosomes were found
        if len(json_chromosomes) == 0:
            return

        stage = "Filter chromosomes using constraints"
        print_stage(stage, verbose)
        filtered_json_chromosomes = filter_chromosomes(json_chromosomes, memory_constraint, time_loss)
        if verbose:
            print("   ", len(filtered_json_chromosomes), "chromosomes match constraints: ")
            print_chromosomes(filtered_json_chromosomes, print_top_chromosomes, print_bottom_chromosomes)

        stage = "Choose best chromosome"
        print_stage(stage, verbose)
        if len(filtered_json_chromosomes) > 0:
            if verbose:
                print("Selecting best chromosome which matches constraints and demonstrates min time loss")
            best_chromosome = select_chromosome_with_min_time_loss(filtered_json_chromosomes)
        else:
            if verbose:
                print("Selecting best chromosome which demonstrates min buffer sizes")
            best_chromosome = select_chromosome_with_min_buf_size(json_chromosomes)

        if verbose:
            print("")
            print("best chromosome:", best_chromosome)

        stage = "Save best chromosome in .json file " + output_file_path
        print_stage(stage, verbose)
        save_as_json(output_file_path, best_chromosome)

    except Exception as e:
        print("GA-based search error: " + str(e))
        traceback.print_tb(e.__traceback__)


def print_chromosomes(json_chromosomes: [], print_top_chromosomes: int, print_bottom_chromosomes: int):
    """
    Print chromosomes from json_chromosomes list
    :param json_chromosomes: list of json chromosomes
    :param print_top_chromosomes: maximum number of chromosomes to print from the top of the list
    :param print_bottom_chromosomes: maximum number of chromosomes to print from the bottom of the list
    """
    total_chromosomes_num = len(json_chromosomes)
    # if number of chromosomes to print >= number of all available chromosomes, print all chromosomes
    if print_top_chromosomes + print_bottom_chromosomes >= total_chromosomes_num:
        for chromosome in json_chromosomes:
            print(chromosome)
        return

    # print top chromosomes
    for i in range(print_bottom_chromosomes):
        print(json_chromosomes[i])

    print("...")

    # print bottom chromosomes.
    bottom_chromosome_start_id = total_chromosomes_num - print_bottom_chromosomes
    # Do not print chromosomes that are already printed as "top" chromosomes
    bottom_chromosome_start_id = max(print_top_chromosomes, bottom_chromosome_start_id)

    for i in range(bottom_chromosome_start_id, total_chromosomes_num):
        print(json_chromosomes[i])


def get_cur_directory():
    this_dir = dirname(__file__)
    return this_dir


if __name__ == "__main__":
    main()
