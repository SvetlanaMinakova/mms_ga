import argparse
from os.path import dirname
import sys
import traceback

"""
Console-interface script for the best chromosome selection performed after the GA-based search
"""


def main():
    parser = argparse.ArgumentParser(description='Train an onnx model with iterations')
    # required arguments
    parser.add_argument('-c', '--chromosomes', type=str, action='store',
                        help='path to .json file with chromosomes, '
                             'generated by the MMS GA (see run_mms_ga.py)', required=True)

    parser.add_argument('-m', metavar='--memory-constraint', type=int, action='store', default=-1,
                        help='maximum amount of memory (in megaBytes) occupied by the buffers of DNNs '
                             'used by the application. If = -1, an application does not have a memory constraint')

    parser.add_argument('-tl', metavar='--time-loss', type=int, action='store', default=-1,
                        help='maximum amount of execution delay (time loss) introduced into '
                             'application by the DNN-based application memory reduction. '
                             'If -1, the application does not have the time loss constraint' )

    # general flags
    parser.add_argument("--silent", help="do not provide print-out for the script steps",
                        action="store_true", default=False)

    # parse arguments
    args = parser.parse_args()

    # Determine current directory and add path to this
    # directory to syspath to use other .python modules
    this_dir = get_cur_directory()
    sys.path.append(this_dir)

    # import sub-modules
    from DSE.low_memory.mms.ga_based.multi_thread.mms_ga import run_ga_parallel_multi
    from util import print_stage
    from fileworkers.json_fw import read_json
    from mms_selection import filter_chromosomes

    try:
        # parse config
        chromosomes_file = args.chromosomes
        memory_constraint = args.m
        time_loss = args.tl
        silent = args.silent
        verbose = not silent

        stage = "Parse file with chromosomes"
        print_stage(stage, verbose)
        json_file_content = read_json(chromosomes_file)
        json_chromosomes = json_file_content["chromosomes"]
        if verbose:
            print("   ", len(json_chromosomes), "chromosomes found.")

        stage = "Filter chromosomes using constraints"
        print_stage(stage, verbose)
        filtered_json_chromosomes = filter_chromosomes(json_chromosomes, memory_constraint, time_loss)
        if verbose:
            print("   ", len(filtered_json_chromosomes), "chromosomes match constraints.")

    except Exception as e:
        print("GA-based search error: " + str(e))
        traceback.print_tb(e.__traceback__)


def get_cur_directory():
    this_dir = dirname(__file__)
    return this_dir


if __name__ == "__main__":
    main()
